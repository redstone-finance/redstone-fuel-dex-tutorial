/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.42.0
  Forc version: 0.35.5
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Vec } from "./common";

export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type U256Input = { a: BigNumberish, b: BigNumberish, c: BigNumberish, d: BigNumberish };
export type U256Output = { a: BN, b: BN, c: BN, d: BN };

interface DexAbiInterface extends Interface {
  functions: {
    change_eth_to_usd: FunctionFragment;
    get_eth_price: FunctionFragment;
    get_expected_usd_amount: FunctionFragment;
    init: FunctionFragment;
    withdraw_funds: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'change_eth_to_usd', values: [Vec<BigNumberish>]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_eth_price', values: [Vec<BigNumberish>]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_expected_usd_amount', values: [BigNumberish, Vec<BigNumberish>]): Uint8Array;
  encodeFunctionData(functionFragment: 'init', values: [ContractIdInput, Vec<string>]): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw_funds', values: []): Uint8Array;

  decodeFunctionData(functionFragment: 'change_eth_to_usd', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_eth_price', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_expected_usd_amount', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'init', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw_funds', data: BytesLike): DecodedValue;
}

export class DexAbi extends Contract {
  interface: DexAbiInterface;
  functions: {
    change_eth_to_usd: InvokeFunction<[payload: Vec<BigNumberish>], void>;
    get_eth_price: InvokeFunction<[payload: Vec<BigNumberish>], U256Output>;
    get_expected_usd_amount: InvokeFunction<[coins_to_swap: BigNumberish, payload: Vec<BigNumberish>], BN>;
    init: InvokeFunction<[usd_contract_id: ContractIdInput, signers: Vec<string>], void>;
    withdraw_funds: InvokeFunction<[], void>;
  };
}
